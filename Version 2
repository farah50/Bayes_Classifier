from sklearn.naive_bayes import GaussianNB
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
import numpy as np
import matplotlib.pyplot as plt

# Load the Iris dataset
iris = load_iris()
X = iris.data[:, :2]  # Use the first two features for visualization
Y = iris.target

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=40)

def train_validate_test_split(data, labels, test_ratio=0.3, val_ratio=0.3, random_seed=None):
    if random_seed is not None:
        np.random.seed(random_seed)

    num_samples = len(data)
    num_test = int(num_samples * test_ratio)
    num_val = int(num_samples * val_ratio)
    num_train = num_samples - num_test - num_val

    indices = np.random.permutation(num_samples)
    shuffled_data = data[indices]
    shuffled_labels = labels[indices]

    X_train = shuffled_data[:num_train]
    Y_train = shuffled_labels[:num_train]

    X_val = shuffled_data[num_train:num_train + num_val]
    Y_val = shuffled_labels[num_train:num_train + num_val]

    X_test = shuffled_data[num_train + num_val:]
    Y_test = shuffled_labels[num_train + num_val:]

    return X_train, Y_train, X_val, Y_val, X_test, Y_test

# Train a Gaussian Naive Bayes classifier on the training data
classifier = GaussianNB()
classifier.fit(X_train, Y_train)

# Draw decision boundaries
# Create a grid for decision boundary visualization
x_min, x_max = X_train[:, 0].min() - 1, X_train[:, 0].max() + 1
y_min, y_max = X_train[:, 1].min() - 1, X_train[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))

# Make predictions using the Naive Bayes classifier
grid = np.c_[xx.ravel(), yy.ravel()]
probs = classifier.predict(grid)

# Reshape the predictions for contour plotting
probs = probs.reshape(xx.shape)

# Plot the decision boundaries and data points
plt.figure(figsize=(10, 6))
plt.contourf(xx, yy, probs, cmap='viridis', alpha=0.6)
plt.scatter(X_train[:, 0], X_train[:, 1], c=Y_train, cmap='viridis', edgecolor='k')
plt.title('Decision Boundaries')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.show()
